#include <iostream>
#include <random>
#include <chrono>
#include <cuda_runtime.h>
#include <cuda_bf16.h>

// Constants matching the original configuration
#define ATTN_B 32
#define ATTN_N 2048
#define ATTN_H 16 // launches
#define ATTN_D 128 // make sure to change in the kernel rotary.cu as well
using rope_t = rotary_template<ATTN_D>;

const int ATTN_D_2 = ATTN_D / 2;

constexpr int NUM_ITERATIONS = 2000;  // Number of test iterations


// Helper function for CUDA error checking
#define CHECK_CUDA(call) do { \
    cudaError_t err = call; \
    if (err != cudaSuccess) { \
        std::cerr << "CUDA error in file '" << __FILE__ << "' line " << __LINE__ \
                  << ": " << cudaGetErrorString(err) << std::endl; \
        exit(EXIT_FAILURE); \
    } \
} while(0)

struct TestResults {
    int num_nans;
    int num_infs;
    int num_large;
    float mean_output;
    float mean_inputs[3];  // means for x
};

class RotaryTest {
private:
    // Size constants
    const int TOTAL_ELEMENTS_X = ATTN_B*ATTN_H*ATTN_N*ATTN_D;
    const int TOTAL_ELEMENTS_O = ATTN_B*ATTN_H*ATTN_N*ATTN_D;
    const int TOTAL_UNIQUE_ELEMENTS_X = ATTN_N*ATTN_D;
    const int TOTAL_UNIQUE_ELEMENTS_O = ATTN_N*ATTN_D;
    const int TOTAL_ELEMENTS_COS_IN = ATTN_N*ATTN_D_2;

    // Host arrays
    float *x, *cos_in, *sin_in;
    float *output;
    __nv_bfloat16 *x_bf, *cos_in_bf, *sin_in_bf, *o_bf;

    // Device arrays
    __nv_bfloat16 *d_x, *d_cos_in, *d_sin_in, *d_o;

    std::mt19937 rng;

    std::vector<void*> noise_blocks;  // For memory noise
    const size_t NUM_NOISE_BLOCKS = 10;
    const size_t NOISE_BLOCK_SIZE = 1024 * 1024;  // 1MB


public:
    RotaryTest() : rng(std::random_device{}()) {
        allocateMemory();
        allocateNoiseBlocks();  // Add noise blocks
    }

    ~RotaryTest() {
        freeMemory();
        freeNoiseBlocks();  // Clean up noise blocks
    }

     void allocateNoiseBlocks() {
        for (size_t i = 0; i < NUM_NOISE_BLOCKS; i++) {
            void* ptr = nullptr;
            if (cudaMalloc(&ptr, NOISE_BLOCK_SIZE) == cudaSuccess) {
                noise_blocks.push_back(ptr);
            }
        }
    }

    void freeNoiseBlocks() {
        for (void* ptr : noise_blocks) {
            cudaFree(ptr);
        }
        noise_blocks.clear();
    }

    void createMemoryPressure() {
        // Allocate and free memory rapidly
        for (int i = 0; i < 5; i++) {
            void* temp = nullptr;
            if (cudaMalloc(&temp, NOISE_BLOCK_SIZE) == cudaSuccess) {
                cudaFree(temp);
            }
        }
    }

    // Test extreme input values
    void generateExtremeInputs() {
        // Edge cases for inputs
        std::vector<float> test_values = {
            0.0f, 1e-10f, 1e10f,  // Test very small/large values
            std::numeric_limits<float>::min(),
            std::numeric_limits<float>::max(),
            std::nextafter(0.0f, 1.0f),  // Smallest positive float
            -0.0f
        };

        // Apply extreme values at random positions
        std::uniform_int_distribution<int> pos_dist_x(0, TOTAL_ELEMENTS_X - 1);
        std::uniform_int_distribution<int> val_dist(0, test_values.size() - 1);

        // Insert some extreme values
        for (int i = 0; i < 100; i++) {
            x[pos_dist_x(rng)] = test_values[val_dist(rng)];
        }
    }

    // Add unaligned memory access
    void createMemoryStress() {
        // Allocate memory blocks of varying sizes
        std::vector<void*> temp_blocks;
        std::vector<size_t> sizes = {1023, 2047, 4095, 8191}; // Unaligned sizes
        
        for (size_t size : sizes) {
            void* ptr = nullptr;
            if (cudaMalloc(&ptr, size) == cudaSuccess) {
                temp_blocks.push_back(ptr);
            }
        }

        // Free in reverse order to create fragmentation
        for (auto it = temp_blocks.rbegin(); it != temp_blocks.rend(); ++it) {
            cudaFree(*it);
        }
    }

    void allocateMemory() {
        // Allocate host memory
        x = new float[TOTAL_ELEMENTS_X];
        output = new float[TOTAL_ELEMENTS_O];
        cos_in = new float[TOTAL_ELEMENTS_COS_IN];
        sin_in = new float[TOTAL_ELEMENTS_COS_IN];
        
        x_bf = new __nv_bfloat16[TOTAL_ELEMENTS_X];
        o_bf = new __nv_bfloat16[TOTAL_ELEMENTS_O];
        cos_in_bf = new __nv_bfloat16[TOTAL_ELEMENTS_COS_IN];
        sin_in_bf = new __nv_bfloat16[TOTAL_ELEMENTS_COS_IN];

        // Device memory allocation with immediate initialization
        CHECK_CUDA(cudaMalloc(&d_x, TOTAL_ELEMENTS_X * sizeof(__nv_bfloat16)));
        CHECK_CUDA(cudaMemset(d_x, 0, TOTAL_ELEMENTS_X * sizeof(__nv_bfloat16)));

        CHECK_CUDA(cudaMalloc(&d_o, TOTAL_ELEMENTS_O * sizeof(__nv_bfloat16)));
        CHECK_CUDA(cudaMemset(d_o, 0, TOTAL_ELEMENTS_O * sizeof(__nv_bfloat16)));

        CHECK_CUDA(cudaMalloc(&d_cos_in, TOTAL_ELEMENTS_COS_IN * sizeof(__nv_bfloat16)));
        CHECK_CUDA(cudaMemset(d_cos_in, 0, TOTAL_ELEMENTS_COS_IN * sizeof(__nv_bfloat16)));

        CHECK_CUDA(cudaMalloc(&d_sin_in, TOTAL_ELEMENTS_COS_IN * sizeof(__nv_bfloat16)));
        CHECK_CUDA(cudaMemset(d_sin_in, 0, TOTAL_ELEMENTS_COS_IN * sizeof(__nv_bfloat16)));

    }

    void freeMemory() {
        // Free host memory
        delete[] x;
        delete[] cos_in;
        delete[] sin_in;
        delete[] output;
        delete[] x_bf;
        delete[] o_bf;
        delete[] cos_in_bf;
        delete[] sin_in_bf;

        // Free device memory
        cudaFree(d_x);
        cudaFree(d_o);
        cudaFree(d_cos_in);
        cudaFree(d_sin_in);
    }

    // Modified generateInputs to occasionally use extreme values
    void generateInputs() {
        static int counter = 0;
        counter++;
        if (counter % 5 == 0) {  // Every 5th iteration
            generateExtremeInputs();
            return;
        }

        // Original input generation code
        std::uniform_real_distribution<float> dist_x(1.0f, 1.0f / 10000.0f);
        for (int i = 0; i < TOTAL_ELEMENTS_X; i++) {
            x[i] = dist_x(rng);
            x_bf[i] = __float2bfloat16(x[i]);  // Convert to bfloat16
        }

        for (int i = 0; i < TOTAL_ELEMENTS_COS_IN; i++) {
            cos_in[i] = dist_x(rng);
            sin_in[i] = dist_x(rng);
            cos_in_bf[i] = __float2bfloat16(cos_in[i]);  // Convert to bfloat16
            sin_in_bf[i] = __float2bfloat16(sin_in[i]);  // Convert to bfloat16
        }
    }

    TestResults runIteration() {        
        TestResults results = {0, 0, 0, 0.0f, {0.0f, 0.0f, 0.0f}};

        // Clear device memory explicitly
        // CHECK_CUDA(cudaMemset(d_q, 0, total_elements_qk * sizeof(__nv_bfloat16)));
        // CHECK_CUDA(cudaMemset(d_k, 0, total_elements_qk * sizeof(__nv_bfloat16)));
        // CHECK_CUDA(cudaMemset(d_v, 0, total_elements_vo * sizeof(__nv_bfloat16)));
        // CHECK_CUDA(cudaMemset(d_a, 0, total_elements_a * sizeof(float)));
        cudaDeviceSynchronize();
        
        generateInputs();
        
        // Calculate input means
        for (int i = 0; i < TOTAL_ELEMENTS_X; i++) {
            results.mean_inputs[0] += x[i];
        }
        for (int i = 0; i < TOTAL_ELEMENTS_COS_IN; i++) {
            results.mean_inputs[1] += cos_in[i];
            results.mean_inputs[2] += sin_in[i];
        }

        results.mean_inputs[0] /= TOTAL_ELEMENTS_X;
        results.mean_inputs[1] /= TOTAL_ELEMENTS_COS_IN;
        results.mean_inputs[2] /= TOTAL_ELEMENTS_COS_IN;

        // Copy data to device
        CHECK_CUDA(cudaMemcpy(d_x, x_bf, TOTAL_ELEMENTS_X * sizeof(__nv_bfloat16), cudaMemcpyHostToDevice));
        CHECK_CUDA(cudaMemcpy(d_cos_in, cos_in_bf, TOTAL_ELEMENTS_COS_IN * sizeof(__nv_bfloat16), cudaMemcpyHostToDevice));
        CHECK_CUDA(cudaMemcpy(d_sin_in, sin_in_bf, TOTAL_ELEMENTS_COS_IN * sizeof(__nv_bfloat16), cudaMemcpyHostToDevice));


        // Run your kernel here
        constexpr int BATCHES_PER_BLOCK = 4;
        rope_t::layout::seq_global Og{d_o, ATTN_B, ATTN_H, ATTN_N, nullptr};
        rope_t::layout::seq_global Xg{d_x, ATTN_B, ATTN_H, ATTN_N, nullptr};
        rope_t::layout::rope_global SINg{d_sin_in, nullptr, nullptr, ATTN_N, nullptr};
        rope_t::layout::rope_global COSg{d_cos_in, nullptr, nullptr, ATTN_N, nullptr};
        rope_t::layout::globals g{Og, Xg, SINg, COSg, BATCHES_PER_BLOCK};

        constexpr int ROWS_PER_BLOCK = rope_t::NUM_CONSUMER_WARPS * rope_t::layout::seq_tile::rows;
        dim3 grid((ATTN_N+ROWS_PER_BLOCK-1)/ROWS_PER_BLOCK, (ATTN_B+BATCHES_PER_BLOCK-1)/BATCHES_PER_BLOCK);
        dim3 block(kittens::prototype::detail::NUM_THREADS_v<rope_t>);

        cudaDeviceSynchronize();
        unsigned long mem_size = (MAX_SHARED_MEMORY-2048);
        cudaFuncSetAttribute(
            kittens::prototype::lcsf::kernel<rope_t>,
            cudaFuncAttributeMaxDynamicSharedMemorySize,
            mem_size
        );
        cudaDeviceSynchronize();

        kittens::prototype::lcsf::kernel<rope_t><<<grid, block, mem_size>>>(g);  
        cudaDeviceSynchronize();

        // Copy results back
        cudaMemcpy(o_bf, d_o, TOTAL_ELEMENTS_O * sizeof(bf16), cudaMemcpyDeviceToHost);
        
        // Convert output to float and check for NaN/Inf
        float mean_output = 0.0f;
        for (int i = 0; i < TOTAL_ELEMENTS_O; i++) {
            output[i] = __bfloat162float(o_bf[i]);
            if (std::isnan(output[i])) results.num_nans++;
            if (std::isinf(output[i])) results.num_infs++;
            if (output[i] > 1e8) results.num_large++;
            mean_output += output[i];
        }
        results.mean_output = mean_output / TOTAL_ELEMENTS_O;

        return results;
    }
};

int main() {
    try {
        RotaryTest test;
        int total_nans = 0;
        int total_infs = 0;

        std::cout << "Starting " << NUM_ITERATIONS << " test iterations..." << std::endl;
        
        for (int i = 0; i < NUM_ITERATIONS; i++) {
            TestResults results = test.runIteration();

            // check that the inputs have no nans or inf means
            int normal_inputs = ( results.mean_inputs[0] > 0.0f && results.mean_inputs[0] < 1.0f ) &&
                                ( results.mean_inputs[1] > 0.0f && results.mean_inputs[1] < 1.0f ) &&
                                ( results.mean_inputs[2] > 0.0f && results.mean_inputs[2] < 1.0f );
            if (  (results.mean_output > 1e8 || results.num_nans > 0 )  ) {
                std::cout << "Iteration " << i << ":\n"
                        << "  NaNs: " << results.num_nans
                        << ", Large: " << results.num_large
                        << ", Infs: " << results.num_infs << "\n"
                        << "  Mean X: " << results.mean_inputs[0]
                        << ", Mean COS: " << results.mean_inputs[1]
                        << ", Mean SIN: " << results.mean_inputs[2] << "\n"
                        << "  Mean Output: " << results.mean_output << std::endl;
            }
                
            total_nans += results.num_nans;
            total_infs += results.num_infs;
        }

        std::cout << "\nTest Summary:\n"
                 << "Total NaNs: " << total_nans << "\n"
                 << "Total Infs: " << total_infs << "\n"
                 << "Success rate: " 
                 << (NUM_ITERATIONS - (total_nans > 0 || total_infs > 0)) 
                 << "/" << NUM_ITERATIONS << std::endl;

    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}